#N canvas 829 376 482 286 10;
#X text 143 11 HOW MIDI IN PURE DATA WORKS;
#N canvas 826 371 729 532 real_time_messages 0;
#X obj 558 41 midirealtimein;
#X obj 549 104 f;
#X obj 597 110 + 1;
#X msg 496 128 0;
#X obj 551 135 sel 24;
#X obj 467 94 loadbang;
#X floatatom 673 121 5 0 0 0 - - -, f 5;
#X obj 564 188 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 556 76 sel 248 250 251 252;
#X text 40 218 248: Timing Clock - 24 of the messages are sent per
each quarter note;
#X text 38 269 250: Start - When play is pushed and the song is at
0:00;
#X text 39 302 251: Continue - When play is pushed at any other time
location.;
#X text 43 345 252: Continue - When stop is pushed.;
#X text 41 377 254: Active Sensing - Intermittent messages when no
other activtiy is occuring to signal the connection is still active.
;
#X text 39 436 255: System Reset - When everything should be set to
their initial states;
#X text 665 145 PORT;
#X obj 597 208 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 625 236 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 660 266 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X text 472 188 QUARTER NOTE;
#X text 557 211 START;
#X text 563 238 CONTINUE;
#X text 620 265 STOP;
#X text 581 501 DEREK KWAN - 2016;
#X text 30 19 MIDI REAL-TIME MESSAGES are messages associated with
the tempo of the song and when the song starts and stops (and from
where). These are handled in PD with the [midirealtimein] object. MIDI
RT messages are associated with the MIDI TIMING CLOCK. In Ardour \,
the client that sends midi real-time messages out is the "MIDI Clock
Out" client.;
#X text 39 120 MIDI RT messages only send out a status byte (the left
outlet of [midirealtimein]) while the right outlet of [midirealtimein]
sends out the incoming port number. Here are the status bytes associated
with MIDI RT messages:;
#X connect 0 0 8 0;
#X connect 0 1 6 0;
#X connect 1 0 2 0;
#X connect 1 0 4 0;
#X connect 2 0 1 1;
#X connect 3 0 1 1;
#X connect 4 0 3 0;
#X connect 4 0 7 0;
#X connect 5 0 3 0;
#X connect 8 0 1 0;
#X connect 8 1 16 0;
#X connect 8 2 17 0;
#X connect 8 3 18 0;
#X restore 132 226 pd real_time_messages;
#N canvas 1131 233 697 561 control_change_messages 0;
#X obj 24 408 ctlin;
#X text 33 93 The FIRST outlet of ctlin/inlet of ctlout pertain to
the actual values the controller are sending. For sustain pedals \,
values 0-63 typically correspond to ON while 64-127 correspond to off
(but this may vary from pedal to pedal).;
#X text 128 268 1 - Mod wheel \, 10 - Pan \, 64 - sustain;
#X text 35 165 The SECOND outlet/inlet pertains to the controller number.
This identifies what type of controller you are dealing with. CC #s
0-63 deal with continuous data while 64-121 deal with binary on/off
data. 122-127 deal with mode messages. Here are a fex examples:;
#X text 44 311 The THIRD outlet/inlet pertains to the MIDI channel
number.;
#X text 46 346 NO args: omni;
#X text 45 363 FIRST arg: cc #;
#X text 46 379 SECOND arg: channel #;
#X floatatom 24 440 5 0 0 0 - - -, f 5;
#X floatatom 63 440 5 0 0 0 - - -, f 5;
#X floatatom 108 443 5 0 0 0 - - -, f 5;
#X text 25 463 Val;
#X text 66 462 CC #;
#X text 110 462 CHAN #;
#X floatatom 192 441 5 0 0 0 - - -, f 5;
#X floatatom 231 441 5 0 0 0 - - -, f 5;
#X text 193 464 Val;
#X text 228 467 CHAN #;
#X obj 192 409 ctlin 1;
#X text 252 406 CC #;
#X floatatom 319 442 5 0 0 0 - - -, f 5;
#X text 320 465 Val;
#X obj 319 410 ctlin 1 1;
#X text 405 405 CC # \, CHAN;
#X text 26 12 MIDI CONTROL CHANGE or CC messages deal with MIDI controller
messages that aren't notes. These could including messages from panning
knobs to modulation wheels to sustain pedals. The PD objects ctlin/ctlout
deal with such messages.;
#X connect 0 0 8 0;
#X connect 0 1 9 0;
#X connect 0 2 10 0;
#X connect 18 0 14 0;
#X connect 18 1 15 0;
#X connect 22 0 20 0;
#X restore 133 180 pd control_change_messages;
#N canvas 1238 276 496 679 touch_messages 0;
#X text 19 12 TOUCH or AFTERTOUCH messages pertain to the messages
sent by controllers relating to the pressure applied to a key after
it is depressed (after the key has been "touched"). These messages
can pertain to a MIDI channel one note at a time (monophonically) and
are received by PD via touchin. They can also pertain to several notes
at once in a MIDI channel (polyphonically) and are received by PD via
polytouchin.;
#X text 24 124 TOUCHIN:;
#X obj 40 245 touchin;
#X floatatom 40 272 5 0 0 0 - - -, f 5;
#X floatatom 87 270 5 0 0 0 - - -, f 5;
#X text 43 290 VAL;
#X text 91 291 CHAN;
#X obj 177 250 touchin 1;
#X floatatom 177 272 5 0 0 0 - - -, f 5;
#X text 173 291 CHAN;
#X text 26 318 POLYTOUCHIN:;
#X text 55 344 The FIRST inlet/outlet of polytouchin/out pertains to
the pressure value.;
#X floatatom 297 253 5 0 0 0 - - -, f 5;
#X obj 296 286 touchout 3;
#X floatatom 358 251 5 0 0 0 - - -, f 5;
#X text 296 233 VAL;
#X text 344 234 CHAN;
#X text 33 147 The FIRST inlet/outlet of touchin/touchout pertains
to the pressure VALUE.;
#X text 31 187 The SECOND inlet/outlet of touchin/touchout pertains
to the MIDI CHANNEL number (if an argument is passed \, this inlet
for touchin doesn't exist).;
#X text 56 386 The SECOND inlet/outlet of polytouchin/out pertains
to the PITCH that the pressure value applies to.;
#X text 59 426 The THIRD inlet/outlet of polytouchin/out pertains to
the MIDI CHANNEL number (if an argt is passed \, this inlet for polytouchin
doesn't exist).;
#X obj 51 500 polytouchin;
#X obj 181 505 polytouchin 3;
#X obj 337 579 polytouchout 5;
#X floatatom 51 522 5 0 0 0 - - -, f 5;
#X text 47 540 VAL;
#X floatatom 91 544 5 0 0 0 - - -, f 5;
#X text 143 580 CHAN;
#X floatatom 138 555 5 0 0 0 - - -, f 5;
#X text 94 561 PITCH;
#X floatatom 183 535 5 0 0 0 - - -, f 5;
#X text 179 553 VAL;
#X floatatom 270 558 5 0 0 0 - - -, f 5;
#X text 273 575 PITCH;
#X floatatom 51 522 5 0 0 0 - - -, f 5;
#X floatatom 91 544 5 0 0 0 - - -, f 5;
#X text 143 580 CHAN;
#X floatatom 138 555 5 0 0 0 - - -, f 5;
#X text 94 561 PITCH;
#X floatatom 339 503 5 0 0 0 - - -, f 5;
#X text 339 484 VAL;
#X floatatom 379 525 5 0 0 0 - - -, f 5;
#X text 426 521 CHAN;
#X floatatom 426 536 5 0 0 0 - - -, f 5;
#X text 379 508 PITCH;
#X text 286 650 DEREK KWAN - 2016;
#X connect 2 0 3 0;
#X connect 2 1 4 0;
#X connect 7 0 8 0;
#X connect 12 0 13 0;
#X connect 14 0 13 1;
#X connect 21 0 24 0;
#X connect 21 1 26 0;
#X connect 21 2 28 0;
#X connect 22 0 30 0;
#X connect 22 1 32 0;
#X connect 39 0 23 0;
#X connect 41 0 23 1;
#X connect 43 0 23 2;
#X restore 134 203 pd touch_messages;
#N canvas 1185 208 456 422 sysex_messages 0;
#X text 17 5 SYSEX or SYStem EXclusive messages were originally designed
to allow manufacturers to make their own custon MIDI messages. The
format later expanded to expanded to include MTC (MIDI Time Code) and
MMC (MIDI Machine Control) messages. MTC messages are the equivalent
of SMPTE messages and contain timestamp information. MMC messages are
used to to command connected analog equipment such as tape decks.;
#X text 23 122 Each sysex sequence of values uses 240 to signal the
start of the message and concldes with 247;
#N canvas 951 172 533 392 MTC 0;
#X text 39 78 240 - start of message;
#X text 40 98 127;
#X text 42 114 0-127 - sysex channel number;
#X text 43 134 1;
#X text 42 151 1;
#X text 67 188 rr: 0 - 24 fps \, 1 - 25 fps \, 10 - 30 fps \, 11 -
30 fps-drop;
#X text 70 205 hhhhh: 0-17 in binary;
#X text 40 169 0-127 - hour/framerate in binary: 0rrhhhhh where;
#X text 41 219 0-59 - minutes;
#X text 40 238 0-59 - seconds;
#X text 14 60 MTC full frame messages consist of the following 10 numbers:
;
#X text 41 254 0-29 - frame number;
#X text 39 276 247 - end of number;
#X text 11 7 There are two types of MTC messages: quarter frame messages
and full frame messages;
#X text 22 320 Quarter frame messages are not sysex messages and will
not be documented here (also \, I need to research this topic further).
;
#X restore 221 375 pd MTC;
#X text 214 356 Learn more about MTC messages;
#X obj 66 270 sysexin;
#X floatatom 66 292 5 0 0 0 - - -, f 5;
#X floatatom 110 294 5 0 0 0 - - -, f 5;
#X text 113 313 PORT;
#X text 67 312 VAL;
#X text 19 173 The [sysexin] object handles incoming sysex messages.
The left outlet passes incoming raw values (only for sysex messages)
while the right inlet passes their port number.;
#X connect 4 0 5 0;
#X connect 4 1 6 0;
#X restore 131 252 pd sysex_messages;
#N canvas 811 173 954 454 note_messages 0;
#X text 11 94 The PITCH number of a note is mapped to half-steps and
60 maps to C4 \, middle C. Thus \, 61 would be one half-step up and
correspond to C#4 while 59 would be one half-step down and correspond
to B3. The [mtof] object takes a midi number and outputs its corresponding
frequency in Hz.;
#X obj 19 194 mtof;
#X floatatom 21 170 5 0 0 0 - - -, f 5;
#X floatatom 19 216 5 0 0 0 - - -, f 5;
#X text 60 171 MIDINOTE;
#X text 63 216 FREQUENCY;
#X text 16 245 The VELOCITY number is the amplitude of the note where
0 is silent and 127 is the loudest possible value.;
#X text 19 284 The DURATION value of a note corresponds to the milliseconds
a note is sustained.;
#X obj 24 387 notein;
#X floatatom 24 409 5 0 0 0 - - -, f 5;
#X floatatom 71 411 5 0 0 0 - - -, f 5;
#X floatatom 119 413 5 0 0 0 - - -, f 5;
#X text 21 425 PITCH;
#X text 74 429 VEL;
#X text 120 432 CHAN;
#X floatatom 173 409 5 0 0 0 - - -, f 5;
#X floatatom 220 411 5 0 0 0 - - -, f 5;
#X text 170 425 PITCH;
#X text 223 429 VEL;
#X obj 173 388 notein 1;
#X text 238 390 CHANNEL;
#X obj 314 424 noteout 1;
#X text 21 323 The [notein] message handles incoming note messages
while [noteout] send them. The optional argument denotes the midi channel
on which a midi note message is sent and replaces the third outlet
on [notein].;
#X floatatom 309 401 5 0 0 0 - - -, f 5;
#X floatatom 358 401 5 0 0 0 - - -, f 5;
#X floatatom 408 403 5 0 0 0 - - -, f 5;
#X text 305 379 PITCH;
#X text 354 381 VEL;
#X text 399 384 CHANNEL;
#X text 475 9 A non-zero velocity denotes a note-on message while a
zero velocity note corresponds to a note-off message. These note-off
messages can be ignored by feeding the output of [notein] into [stripnote].
;
#X obj 481 74 notein;
#X obj 481 101 stripnote;
#X floatatom 481 123 5 0 0 0 - - -, f 5;
#X floatatom 534 125 5 0 0 0 - - -, f 5;
#X text 480 141 PITCH;
#X text 536 142 VEL;
#X text 470 175 A handy object [makenote] helps you create note messages
by automatically taking care of the note-off messages. The arguments
correspond to initial velocity and duration in ms.;
#X obj 491 352 makenote 64 500;
#X obj 490 303 pack f 64;
#X obj 490 325 unpack f f;
#X obj 491 382 noteout;
#X floatatom 489 276 5 0 0 0 - - -, f 5;
#X floatatom 551 277 5 0 0 0 - - -, f 5;
#X text 484 259 PITCH;
#X text 550 258 VEL;
#X text 14 8 NOTE messages are messages that will you will probably
deal with the most. They pertain to the signaling of notes to start
or stop and carry data about their pitch \, velocity (loudness) and
duration. These data values can range from 0 to 127;
#X text 693 424 Derek Kwan - 2016;
#X connect 1 0 3 0;
#X connect 2 0 1 0;
#X connect 8 0 9 0;
#X connect 8 1 10 0;
#X connect 8 2 11 0;
#X connect 19 0 15 0;
#X connect 19 1 16 0;
#X connect 23 0 21 0;
#X connect 24 0 21 1;
#X connect 25 0 21 2;
#X connect 30 0 31 0;
#X connect 30 1 31 1;
#X connect 31 0 32 0;
#X connect 31 1 33 0;
#X connect 37 0 40 0;
#X connect 37 1 40 1;
#X connect 38 0 39 0;
#X connect 39 0 37 0;
#X connect 39 1 37 1;
#X connect 41 0 38 0;
#X connect 42 0 38 1;
#X restore 131 134 pd note_messages;
#N canvas 918 224 466 412 program_change_bend_messages 0;
#X text 13 4 PROGRAM CHANGE messages are meant to signal MIDI devices
to change to programs or patches specified by the data value. Like
MIDI notes \, the data values can range from 0 to 127;
#X text 9 57 BEND messages are associated with pitch bending and also
take data values from 0 to 127;
#X text 19 108 These messages are handled by pgmin/pgmout and bendin/bendout
respectively. The first inlet/outlet of these objects is associated
with the data value while the second inlet/outlet is associated with
the MIDI channel number. If the channel number is specified as an argument
\, the "in" versions of these objects do not have a second outlet.
;
#X obj 42 227 pgmin;
#X floatatom 42 249 5 0 0 0 - - -, f 5;
#X floatatom 85 249 5 0 0 0 - - -, f 5;
#X text 38 267 DATA;
#X text 85 268 VAL;
#X floatatom 137 249 5 0 0 0 - - -, f 5;
#X text 133 267 DATA;
#X obj 137 227 pgmin 1;
#X text 197 227 MIDI CHAN;
#X floatatom 289 238 5 0 0 0 - - -, f 5;
#X floatatom 337 237 5 0 0 0 - - -, f 5;
#X obj 289 257 pgmout 1;
#X text 282 224 DATA;
#X text 339 220 VAL;
#X floatatom 45 318 5 0 0 0 - - -, f 5;
#X floatatom 88 318 5 0 0 0 - - -, f 5;
#X text 41 336 DATA;
#X text 88 337 VAL;
#X floatatom 140 318 5 0 0 0 - - -, f 5;
#X text 136 336 DATA;
#X text 200 296 MIDI CHAN;
#X floatatom 292 307 5 0 0 0 - - -, f 5;
#X floatatom 340 306 5 0 0 0 - - -, f 5;
#X text 285 293 DATA;
#X text 342 289 VAL;
#X obj 45 296 bendin;
#X obj 140 296 bendin 1;
#X obj 292 326 bendout 1;
#X text 336 378 Derek Kwan - 2016;
#X connect 3 0 4 0;
#X connect 3 1 5 0;
#X connect 10 0 8 0;
#X connect 12 0 14 0;
#X connect 13 0 14 1;
#X connect 24 0 30 0;
#X connect 25 0 30 1;
#X connect 28 0 17 0;
#X connect 28 1 18 0;
#X connect 29 0 21 0;
#X restore 131 158 pd program_change_bend_messages;
#N canvas 1124 216 472 707 midi_overview 0;
#X text 13 3 The MIDI (Musical Instrument Digital Interface) Specification
first came into being in 1983 and predates the more flexible standard
OSC (Open Sound Control). Despite this \, MIDI is still in heavy use
and is included as a feature of most every Digital Audio Workstation
(DAW) and music programming software.;
#X text 13 105 MIDI messages are used to send digital messages to and
from MIDI devices such as piano keyboards with built-in sequencers
and electronic drum pads. These messages are sent on MIDI channels.
Think of MIDI channels as television channels. The information from
a MIDI keyboard could be coming into your software via channel 1 \,
a MIDI drum controller could be coming in on channel 2 \, and so on.
;
#X text 11 213 As many as 16 channels can come in on a MIDI port. A
MIDI port serves as the physical connection between devices via a MIDI
(or more recently \, a USB) cable \, but virtual MIDi ports in such
audio bridging software such as JACK and Soundflower can exist as well.
Pure Data makes use of this idea of virtual ports and under the Media
dropdown menu \, you can choose to open as many input and output port
as you desire.;
#X text 12 323 Data values coming in and leaving on MIDI channels are
composed of 1 byte or 8 bit words. For data bytes \, the first bit
(most significant bit) is 0 and thus data values can range from 0 to
127;
#X text 15 390 There are also status values which are also composed
of 1 byte but use all their bits and thus can take on values from 0
to 255 These status bytes specify what type of MIDI message we are
sending. In Pure Data \, we typically don't have to worry about these
status bytes because they are obscured within the functionality of
most of the MIDI objects (aside from [midiin] \, [sysexin] \, and [midirealtimein]).
;
#X obj 28 613 midiin;
#X floatatom 28 635 5 0 0 0 - - -, f 5;
#X floatatom 70 638 5 0 0 0 - - -, f 5;
#X text 23 656 VAL;
#X text 70 662 PORT;
#X obj 188 651 midiout;
#X floatatom 188 625 5 0 0 0 - - -, f 5;
#X floatatom 234 628 5 0 0 0 - - -, f 5;
#X text 30 518 The objects [midiin] and [midiout] don't take care of
status bytes for us and ared the most basic MIDI objects in Pure Data.
The left inlet/outlet of these objects pertain to the raw values (both
status and data bytes) while the right inlet/outlet pertain to which
port the messages are associated with.;
#X text 189 608 VAL;
#X text 236 614 PORT;
#X text 300 671 Derek Kwan - 2016;
#X connect 5 0 6 0;
#X connect 5 1 7 0;
#X connect 11 0 10 0;
#X connect 12 0 10 1;
#X restore 129 114 pd midi_overview;
#X text 150 26 Derek Kwan - 2016;
#X text 22 58 Double-click (while outside of edit mode) on each subpatch
object box to find out more about their respective topics.;
